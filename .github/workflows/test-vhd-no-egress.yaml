name: Test VHD No Egress

on:
  workflow_dispatch:
    inputs:
      from_branch:
        description: 'Which branch are we running this pipeline for? (if left blank, by default will use the branch used to trigger workflow)'
        required: false
        default: ''
  workflow_call:
    inputs:
      from_branch:
        required: true
        type: string

jobs:
  e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{inputs.from_branch}}
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: "go.mod"
      - name: Setup SSH Keys and known_hosts
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          ssh-agent -a $SSH_AUTH_SOCK
      - name: Install helm
        run: |
          curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
          sudo apt-get install apt-transport-https --yes
          echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
          sudo apt-get update
          sudo apt-get install helm
      - name: Install k
        run: |
          sudo curl -o /usr/local/bin/k https://raw.githubusercontent.com/jakepearson/k/master/k
          sudo chmod +x /usr/local/bin/k
      - name: Build aks-engine-azurestack binary
        run: make build-binary
      - name: Validate 1.25 no-egress scenario, deploy and test suite after deploy
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
          ORCHESTRATOR_RELEASE: "1.25"
          CLUSTER_DEFINITION: "examples/no_outbound.json"
          SUBSCRIPTION_ID: ${{ secrets.TEST_AZURE_SUB_ID }}
          CLIENT_ID: ${{ secrets.TEST_AZURE_SP_ID }}
          CLIENT_SECRET: ${{ secrets.TEST_AZURE_SP_PW }}
          LOCATION: "eastus"
          TENANT_ID: ${{ secrets.TEST_AZURE_TENANT_ID }}
          CLEANUP_ON_EXIT: true
          CLEANUP_IF_FAIL: false
          SKIP_LOGS_COLLECTION: true
          SKIP_TEST: true
          AZURE_CORE_ONLY_SHOW_ERRORS: true
          BLOCK_SSH: false
          RETAIN_SSH: false
          BLOCK_OUTBOUND_INTERNET: true
          CONTAINER_RUNTIME: containerd
          WINDOWS_NODE_IMAGE_SUBSCRIPTION_ID: ${{ secrets.TEST_AZURE_SUB_ID }}
          WINDOWS_NODE_IMAGE_RESOURCE_GROUP: AKSeImages
          WINDOWS_NODE_IMAGE_GALLERY: AKSeGallery
          WINDOWS_NODE_IMAGE_NAME: windows2019containerd
          WINDOWS_NODE_IMAGE_VERSION: 2023.079.1
          LINUX_NODE_IMAGE_SUBSCRIPTION_ID: ${{ secrets.TEST_AZURE_SUB_ID }}
          LINUX_NODE_IMAGE_RESOURCE_GROUP: AKSeImages
          LINUX_NODE_IMAGE_GALLERY: AKSeGallery
          LINUX_NODE_IMAGE_NAME: ubuntu-20.04
          LINUX_NODE_IMAGE_VERSION: 2023.079.1
        run: |
          make test-kubernetes
